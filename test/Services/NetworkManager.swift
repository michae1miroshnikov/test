//
//  NetworkManager.swift
//  test
//
//  Created by Michael Miroshnikov on 07/08/2025.
//

import Foundation

/// –ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –º–µ—Ä–µ–∂–µ–≤–æ—ó –≤–∑–∞—î–º–æ–¥—ñ—ó –∑ —Å–µ—Ä–≤–µ—Ä–æ–º
class NetworkManager {
    static let shared = NetworkManager()
    
    private let baseURL = "https://jsonplaceholder.typicode.com/posts"
    private let session = URLSession.shared
    
    private init() {}
    
    /// –í—ñ–¥–ø—Ä–∞–≤–ª—è—î –¥–∞–Ω—ñ –Ω–∞ —Å–µ—Ä–≤–µ—Ä –∑ –±–∞–∑–æ–≤–∏–º –∑–∞—Ö–∏—Å—Ç–æ–º
    func sendData(_ deviceData: DeviceData) {
        // –ö–æ–¥—É—î–º–æ –¥–∞–Ω—ñ –≤ JSON
        guard let jsonData = try? JSONEncoder().encode(deviceData) else {
            print("‚ùå –ü–æ–º–∏–ª–∫–∞ –∫–æ–¥—É–≤–∞–Ω–Ω—è JSON")
            return
        }
        
        // –ö–æ–¥—É—î–º–æ JSON —É Base64 –¥–ª—è –±–∞–∑–æ–≤–æ–≥–æ –∑–∞—Ö–∏—Å—Ç—É
        let base64Data = jsonData.base64EncodedString()
        
        // –°—Ç–≤–æ—Ä—é—î–º–æ payload –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏
        let payload = ["data": base64Data, "type": "device_data"]
        
        guard let payloadData = try? JSONSerialization.data(withJSONObject: payload) else {
            print("‚ùå –ü–æ–º–∏–ª–∫–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è payload")
            return
        }
        
        // –°—Ç–≤–æ—Ä—é—î–º–æ URL –∑–∞–ø–∏—Ç
        guard let url = URL(string: baseURL) else {
            print("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π URL")
            return
        }
        
        var request = URLRequest(url: url)
        request.httpMethod = "POST"
        request.setValue("application/json", forHTTPHeaderField: "Content-Type")
        request.httpBody = payloadData
        
        // –í–∏–∫–æ–Ω—É—î–º–æ –∑–∞–ø–∏—Ç
        let task = session.dataTask(with: request) { [weak self] data, response, error in
            DispatchQueue.main.async {
                self?.handleResponse(data: data, response: response, error: error)
            }
        }
        
        task.resume()
    }
    
    /// –û–±—Ä–æ–±–ª—è—î –≤—ñ–¥–ø–æ–≤—ñ–¥—å —Å–µ—Ä–≤–µ—Ä–∞
    private func handleResponse(data: Data?, response: URLResponse?, error: Error?) {
        if let error = error {
            print("‚ùå –ü–æ–º–∏–ª–∫–∞ –º–µ—Ä–µ–∂—ñ: \(error.localizedDescription)")
            return
        }
        
        guard let httpResponse = response as? HTTPURLResponse else {
            print("‚ùå –ù–µ–≤—ñ—Ä–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å —Å–µ—Ä–≤–µ—Ä–∞")
            return
        }
        
        if httpResponse.statusCode == 200 || httpResponse.statusCode == 201 {
            print("‚úÖ –î–∞–Ω—ñ —É—Å–ø—ñ—à–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä")
            
            if let data = data {
                do {
                    let response = try JSONDecoder().decode(ServerResponse.self, from: data)
                    print("üì° –í—ñ–¥–ø–æ–≤—ñ–¥—å —Å–µ—Ä–≤–µ—Ä–∞: \(response)")
                } catch {
                    print("‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –¥–µ–∫–æ–¥—É–≤–∞—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å —Å–µ—Ä–≤–µ—Ä–∞")
                }
            }
        } else {
            print("‚ùå –ü–æ–º–∏–ª–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞: —Å—Ç–∞—Ç—É—Å \(httpResponse.statusCode)")
        }
    }
} 